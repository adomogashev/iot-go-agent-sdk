// Code generated by go-swagger; DO NOT EDIT.

package events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vk-cs/iot-go-agent-sdk/gen/swagger/http_client/models"
)

// AddEventReader is a Reader for the AddEvent structure.
type AddEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddEventBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddEventUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddEventTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddEventInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddEventOK creates a AddEventOK with default headers values
func NewAddEventOK() *AddEventOK {
	return &AddEventOK{}
}

/* AddEventOK describes a response with status code 200, with default header values.

OK
*/
type AddEventOK struct {
}

func (o *AddEventOK) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventOK ", 200)
}

func (o *AddEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddEventBadRequest creates a AddEventBadRequest with default headers values
func NewAddEventBadRequest() *AddEventBadRequest {
	return &AddEventBadRequest{}
}

/* AddEventBadRequest describes a response with status code 400, with default header values.

Bad params suplied
*/
type AddEventBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *AddEventBadRequest) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventBadRequest  %+v", 400, o.Payload)
}
func (o *AddEventBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddEventBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventUnauthorized creates a AddEventUnauthorized with default headers values
func NewAddEventUnauthorized() *AddEventUnauthorized {
	return &AddEventUnauthorized{}
}

/* AddEventUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddEventUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *AddEventUnauthorized) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventUnauthorized  %+v", 401, o.Payload)
}
func (o *AddEventUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddEventUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventNotFound creates a AddEventNotFound with default headers values
func NewAddEventNotFound() *AddEventNotFound {
	return &AddEventNotFound{}
}

/* AddEventNotFound describes a response with status code 404, with default header values.

Tag not found
*/
type AddEventNotFound struct {
	Payload *models.ErrorResponse
}

func (o *AddEventNotFound) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventNotFound  %+v", 404, o.Payload)
}
func (o *AddEventNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventTooManyRequests creates a AddEventTooManyRequests with default headers values
func NewAddEventTooManyRequests() *AddEventTooManyRequests {
	return &AddEventTooManyRequests{}
}

/* AddEventTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type AddEventTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *AddEventTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventTooManyRequests  %+v", 429, o.Payload)
}
func (o *AddEventTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddEventTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddEventInternalServerError creates a AddEventInternalServerError with default headers values
func NewAddEventInternalServerError() *AddEventInternalServerError {
	return &AddEventInternalServerError{}
}

/* AddEventInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AddEventInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *AddEventInternalServerError) Error() string {
	return fmt.Sprintf("[POST /events][%d] addEventInternalServerError  %+v", 500, o.Payload)
}
func (o *AddEventInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *AddEventInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

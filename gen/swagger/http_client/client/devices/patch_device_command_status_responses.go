// Code generated by go-swagger; DO NOT EDIT.

package devices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vk-cs/iot-go-agent-sdk/gen/swagger/http_client/models"
)

// PatchDeviceCommandStatusReader is a Reader for the PatchDeviceCommandStatus structure.
type PatchDeviceCommandStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDeviceCommandStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDeviceCommandStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDeviceCommandStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDeviceCommandStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDeviceCommandStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchDeviceCommandStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDeviceCommandStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchDeviceCommandStatusOK creates a PatchDeviceCommandStatusOK with default headers values
func NewPatchDeviceCommandStatusOK() *PatchDeviceCommandStatusOK {
	return &PatchDeviceCommandStatusOK{}
}

/* PatchDeviceCommandStatusOK describes a response with status code 200, with default header values.

OK
*/
type PatchDeviceCommandStatusOK struct {
}

func (o *PatchDeviceCommandStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusOK ", 200)
}

func (o *PatchDeviceCommandStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchDeviceCommandStatusBadRequest creates a PatchDeviceCommandStatusBadRequest with default headers values
func NewPatchDeviceCommandStatusBadRequest() *PatchDeviceCommandStatusBadRequest {
	return &PatchDeviceCommandStatusBadRequest{}
}

/* PatchDeviceCommandStatusBadRequest describes a response with status code 400, with default header values.

Bad params suplied
*/
type PatchDeviceCommandStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PatchDeviceCommandStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusBadRequest  %+v", 400, o.Payload)
}
func (o *PatchDeviceCommandStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceCommandStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeviceCommandStatusUnauthorized creates a PatchDeviceCommandStatusUnauthorized with default headers values
func NewPatchDeviceCommandStatusUnauthorized() *PatchDeviceCommandStatusUnauthorized {
	return &PatchDeviceCommandStatusUnauthorized{}
}

/* PatchDeviceCommandStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchDeviceCommandStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PatchDeviceCommandStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchDeviceCommandStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceCommandStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeviceCommandStatusNotFound creates a PatchDeviceCommandStatusNotFound with default headers values
func NewPatchDeviceCommandStatusNotFound() *PatchDeviceCommandStatusNotFound {
	return &PatchDeviceCommandStatusNotFound{}
}

/* PatchDeviceCommandStatusNotFound describes a response with status code 404, with default header values.

Tag not found
*/
type PatchDeviceCommandStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PatchDeviceCommandStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusNotFound  %+v", 404, o.Payload)
}
func (o *PatchDeviceCommandStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceCommandStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeviceCommandStatusTooManyRequests creates a PatchDeviceCommandStatusTooManyRequests with default headers values
func NewPatchDeviceCommandStatusTooManyRequests() *PatchDeviceCommandStatusTooManyRequests {
	return &PatchDeviceCommandStatusTooManyRequests{}
}

/* PatchDeviceCommandStatusTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PatchDeviceCommandStatusTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *PatchDeviceCommandStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusTooManyRequests  %+v", 429, o.Payload)
}
func (o *PatchDeviceCommandStatusTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceCommandStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDeviceCommandStatusInternalServerError creates a PatchDeviceCommandStatusInternalServerError with default headers values
func NewPatchDeviceCommandStatusInternalServerError() *PatchDeviceCommandStatusInternalServerError {
	return &PatchDeviceCommandStatusInternalServerError{}
}

/* PatchDeviceCommandStatusInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PatchDeviceCommandStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PatchDeviceCommandStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /devices/{device_id}/commands/{command_id}/status][%d] patchDeviceCommandStatusInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchDeviceCommandStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchDeviceCommandStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/vk-cs/iot-go-agent-sdk/gen/swagger/http_client/models"
)

// PatchAgentCommandStatusReader is a Reader for the PatchAgentCommandStatus structure.
type PatchAgentCommandStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchAgentCommandStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchAgentCommandStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchAgentCommandStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchAgentCommandStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchAgentCommandStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPatchAgentCommandStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchAgentCommandStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchAgentCommandStatusOK creates a PatchAgentCommandStatusOK with default headers values
func NewPatchAgentCommandStatusOK() *PatchAgentCommandStatusOK {
	return &PatchAgentCommandStatusOK{}
}

/* PatchAgentCommandStatusOK describes a response with status code 200, with default header values.

OK
*/
type PatchAgentCommandStatusOK struct {
}

func (o *PatchAgentCommandStatusOK) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusOK ", 200)
}

func (o *PatchAgentCommandStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPatchAgentCommandStatusBadRequest creates a PatchAgentCommandStatusBadRequest with default headers values
func NewPatchAgentCommandStatusBadRequest() *PatchAgentCommandStatusBadRequest {
	return &PatchAgentCommandStatusBadRequest{}
}

/* PatchAgentCommandStatusBadRequest describes a response with status code 400, with default header values.

Bad params suplied
*/
type PatchAgentCommandStatusBadRequest struct {
	Payload *models.ErrorResponse
}

func (o *PatchAgentCommandStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusBadRequest  %+v", 400, o.Payload)
}
func (o *PatchAgentCommandStatusBadRequest) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchAgentCommandStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAgentCommandStatusUnauthorized creates a PatchAgentCommandStatusUnauthorized with default headers values
func NewPatchAgentCommandStatusUnauthorized() *PatchAgentCommandStatusUnauthorized {
	return &PatchAgentCommandStatusUnauthorized{}
}

/* PatchAgentCommandStatusUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchAgentCommandStatusUnauthorized struct {
	Payload *models.ErrorResponse
}

func (o *PatchAgentCommandStatusUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchAgentCommandStatusUnauthorized) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchAgentCommandStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAgentCommandStatusNotFound creates a PatchAgentCommandStatusNotFound with default headers values
func NewPatchAgentCommandStatusNotFound() *PatchAgentCommandStatusNotFound {
	return &PatchAgentCommandStatusNotFound{}
}

/* PatchAgentCommandStatusNotFound describes a response with status code 404, with default header values.

Tag not found
*/
type PatchAgentCommandStatusNotFound struct {
	Payload *models.ErrorResponse
}

func (o *PatchAgentCommandStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusNotFound  %+v", 404, o.Payload)
}
func (o *PatchAgentCommandStatusNotFound) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchAgentCommandStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAgentCommandStatusTooManyRequests creates a PatchAgentCommandStatusTooManyRequests with default headers values
func NewPatchAgentCommandStatusTooManyRequests() *PatchAgentCommandStatusTooManyRequests {
	return &PatchAgentCommandStatusTooManyRequests{}
}

/* PatchAgentCommandStatusTooManyRequests describes a response with status code 429, with default header values.

Too Many Requests
*/
type PatchAgentCommandStatusTooManyRequests struct {
	Payload *models.ErrorResponse
}

func (o *PatchAgentCommandStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusTooManyRequests  %+v", 429, o.Payload)
}
func (o *PatchAgentCommandStatusTooManyRequests) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchAgentCommandStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchAgentCommandStatusInternalServerError creates a PatchAgentCommandStatusInternalServerError with default headers values
func NewPatchAgentCommandStatusInternalServerError() *PatchAgentCommandStatusInternalServerError {
	return &PatchAgentCommandStatusInternalServerError{}
}

/* PatchAgentCommandStatusInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type PatchAgentCommandStatusInternalServerError struct {
	Payload *models.ErrorResponse
}

func (o *PatchAgentCommandStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /agents/{agent_id}/commands/{command_id}/status][%d] patchAgentCommandStatusInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchAgentCommandStatusInternalServerError) GetPayload() *models.ErrorResponse {
	return o.Payload
}

func (o *PatchAgentCommandStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

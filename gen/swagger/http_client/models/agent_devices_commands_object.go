// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentDevicesCommandsObject agent devices commands object
//
// swagger:model AgentDevicesCommandsObject
type AgentDevicesCommandsObject struct {

	// command
	Command *CommandObject `json:"command,omitempty"`

	// devices
	// Required: true
	Devices []*AgentDevicesCommandsObjectDevicesItems0 `json:"devices"`
}

// Validate validates this agent devices commands object
func (m *AgentDevicesCommandsObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDevicesCommandsObject) validateCommand(formats strfmt.Registry) error {
	if swag.IsZero(m.Command) { // not required
		return nil
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDevicesCommandsObject) validateDevices(formats strfmt.Registry) error {

	if err := validate.Required("devices", "body", m.Devices); err != nil {
		return err
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this agent devices commands object based on the context it is used
func (m *AgentDevicesCommandsObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDevices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDevicesCommandsObject) contextValidateCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.Command != nil {
		if err := m.Command.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDevicesCommandsObject) contextValidateDevices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Devices); i++ {

		if m.Devices[i] != nil {
			if err := m.Devices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentDevicesCommandsObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentDevicesCommandsObject) UnmarshalBinary(b []byte) error {
	var res AgentDevicesCommandsObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AgentDevicesCommandsObjectDevicesItems0 agent devices commands object devices items0
//
// swagger:model AgentDevicesCommandsObjectDevicesItems0
type AgentDevicesCommandsObjectDevicesItems0 struct {

	// command
	// Required: true
	Command *CommandObject `json:"command"`

	// device id
	// Example: 1
	// Required: true
	DeviceID *int64 `json:"device_id"`
}

// Validate validates this agent devices commands object devices items0
func (m *AgentDevicesCommandsObjectDevicesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDevicesCommandsObjectDevicesItems0) validateCommand(formats strfmt.Registry) error {

	if err := validate.Required("command", "body", m.Command); err != nil {
		return err
	}

	if m.Command != nil {
		if err := m.Command.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

func (m *AgentDevicesCommandsObjectDevicesItems0) validateDeviceID(formats strfmt.Registry) error {

	if err := validate.Required("device_id", "body", m.DeviceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this agent devices commands object devices items0 based on the context it is used
func (m *AgentDevicesCommandsObjectDevicesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCommand(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentDevicesCommandsObjectDevicesItems0) contextValidateCommand(ctx context.Context, formats strfmt.Registry) error {

	if m.Command != nil {
		if err := m.Command.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("command")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("command")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentDevicesCommandsObjectDevicesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentDevicesCommandsObjectDevicesItems0) UnmarshalBinary(b []byte) error {
	var res AgentDevicesCommandsObjectDevicesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
